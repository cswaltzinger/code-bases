import mediapipe as mp
import cv2 


def MPHands():
    return mp.solutions.hands, mp.solutions.hands.Hands(
        static_image_mode=True, 
        max_num_hands=2,
        min_detection_confidence=0.5),  mp.solutions.hands.HAND_CONNECTIONS, lambda x: x.left_hand_landmarks

def MPFaceMesh():
    return mp.solutions.face_mesh, mp.solutions.face_mesh.FaceMesh(
        static_image_mode=True,
        max_num_faces=1,
        min_detection_confidence=0.5), mp.solutions.face_mesh.FACEMESH_TESSELATION, lambda x: x.multi_face_landmarks


def MPPose():
    return mp.solutions.pose, mp.solutions.pose.Pose(
        static_image_mode=True,
        model_complexity=1,
        enable_segmentation=False,
        min_detection_confidence=0.5), mp.solutions.pose.POSE_CONNECTIONS, lambda x: x.pose_landmarks

# identify in [mp.solutions.hands, mp.solutions.face_mesh, mp.solutions.pose]
def mediapipe_recognition(toUse = MPHands()):
    # Open a video capture object (0 for the default camera)
    cap = cv2.VideoCapture(0)

    mp_solution, identifier, drawings, resultTest = toUse
    mp_drawing = mp.solutions.drawing_utils


    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            continue

        # Convert the frame to RGB format
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        # Process the frame to detect hands
        results = identifier.process(frame_rgb)
        # Check if hands are detected
        res = resultTest(results)
        if res:
            # print(* [ key for key in res.__dict__],sep='\n')

            for hand_landmarks in res:
                # Draw the landmarks on the frame
                mp_drawing.draw_landmarks(frame, hand_landmarks, drawings)
                break
    
        frame = cv2.flip(frame, 1)
        # Display the frame with hand landmarks
        cv2.imshow('Hand Recognition', frame)
        
        # Exit when 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break


    # Release the video capture object and close the OpenCV windows
    cap.release()
    cv2.destroyAllWindows()


mediapipe_recognition(MPPose())